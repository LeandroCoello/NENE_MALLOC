
--Tablas

Por cada usuario va a haber una fila de datos de su tipo(en la tabla empresa o cliente o administrativo) y los campos mail, teléfono y datos del domicilio, ya que se repetían en los tres tipos de usuario, se decidió normalizarlos en otra tabla llamada Datos_Pers.

Para tratar polimorficamente el tipo, es decir para facilitar la determinación de la tabla en la que se encuentra su tipo, creamos la tabla intermedia Tipo(aplicando la forma de herencia -Joined Table-), por eso es necesario que cada fila de empresa, cliente y administrativo tenga su fila asociada en la tabla Tipo(implementacion de joined table). 

A su vez existen tres roles fijos(se pueden agregar mas) asociados a sus funcionalidades. Cada fila de tipo tiene una fk a rol, esto significa que dependiendo el tipo se le asocia un rol con sus respectivas funcionalidades. 

Luego para publicación creamos una tabla con ese nombre y sus respectivos campos, definiendo una fk a la tabla Visibilidad(cuyos campos son la descripción,duración,precio,porcentaje y un bit para la baja lógica) y otra a la tabla Usuario(o sea dueño de la publicación).
Debido a que por enunciado se supone que una publicación puede tener varios rubros, implementamos una relación muchos a muchos entre la tabla Rubro y Publicación(con la respectiva tabla intermedia Pub_Por_Rubro).

Las preguntas y respuestas las normalizamos tratándolas en tablas separadas (Pregunta y Respuesta respectivamente) donde la primera conoce a la publicación a la cual pertenece, al usuario que la realizó, a su respuesta (cuando el dueño de la publicación responda), su fecha y el texto. La respuesta contiene el texto y la fecha en la cual se creó.

En la tabla Calificación ubicamos al usuario que calificó y a la publicación(dos fk, una a Usuario y la otra a Publicación), la cantidad de estrellas otorgadas y la descripción optativa.

Utilizamos la tabla Compra para almacenar las compras justamente de las publicaciones cuyo tipo es 'Compra Inmediata', relacionándola mediante un campo fk a Publicación y otro a Usuario(siendo éste el comprador). Tambien la tabla contiene la fecha y cantidad.

Luego para las ofertas de subastas creamos la tabla Oferta que conoce a su publicación y al usuario que ofertó (con fk a Publicación y Usuario), su fecha, monto y un booleano para determinar si fue el ganador de la subasta luego de que ésta finalice.

El objetivo de que los datos de calificación, compra y oferta estén ubicados en esas tablas es, aparte de la normalización, utilizar las mismas para la obtención del historial, explicado mas adelante.

El Grado de visibilidad, es decir el orden en que se muestran las publicaciones segun las visibilidades coincide con el orden de las códigos de éstas.

Forma de pago una tabla sola con campo 'E' o 'T' si es efectivo o tarjeta con atributos comunes(monto) y no comunes (en el caso de efectivo los campos de tarjeta van en null)



-- Migracion

La mayoría de las tablas se migraron realizando inserts masivos.

Para el caso de Empresa, Cliente y Publicación, debido a la normalización, por cada fila de Empresa y Cliente tenemos que insertar en cuatro tablas(Tipo,Datos_Pers,Empresa o Cliente y Usuario) y para Publicación en dos(Publicación y Pub_Por_Rubro -ésta última porque se supone que una publicación puede tener varios rubros-) . Por este tema decidimos migrar las tres tablas implementando cursores, aceptando la penalización de tiempo que nos trae su utilización.
Tambien debido a que se deben guardar datos de forma de pago tarjeta (es decir hacer un insert a dos tablas distintas al migrar), implementamos un cursor para factura.

Tanto en los inserts masivos como en los cursores los campos fk los completamos con subconsultas.

Utilizamos Ids autoincrementales en aquellas tablas cuyo código no estaba determinado en la tabla maestra, particularmente en Funcionalidad, Datos_Pers, Tipo, Usuario, Pregunta, Respuesta, Item_Factura, Compra, Oferta y Rubro. El objetivo es delegar el tratamiento de Ids(las pks de las tablas) al motor de base de datos.

Cada vez que se realiza una venta por compra inmediata o por subasta se generara un item factura que todavia
no va a estar rendido en ninguna factura. A la hora de rendir las publicaciones simplemente se añadirán los items
a la factura a pagar comenzando desde las más antiguas.

Para la migración se considera que la fecha en la que se realizó una calificación es la misma fecha en la cual se realizó la compra la cual se está calificando
o la fecha en la que finalizóla subasta en cuestión.


Las publicaciones migradas de la tabla maestra se considerarán como Finalizadas.

Los Numeros de documento migrados de la tabla maestra serán considerados todos como tipo DNI, esto fue inferido por el nombre de la columna. En futuras incerciones
se permite tener otro tipo de documento.

El stock a la hora de migrar se considerará que no está actualizado por ende en la migración se le resta la cantidad de unidades vendidas.

Los datos pertinentes a las tablas que se encuentren en Null en la tabla maestra a la hora de la migración serán dejados como tal(en Null) hasta que se modifiquen.


-- Aclaraciones


Las fechas en el script_inicial en un principio se obtenian con GETDATE() pero luego se decidió recibirlas por un parámetro de tipo nvarchar(8) (AAAAMMDD)
desde el código en C# ya que se establecen en el archivo de configuración y eso aporta una mayor consistencia. Ese parámetro luego será pasado a datetime.

Las publicaciones generan un item_factura al momento de su finalización, mientrás que las compras inmediatas y subastas que le compraron al vendedor generan un
item_factura a la hora de realizarse la venta. Esto no se produce en el mismo momento en el cual se factura. Las rendiciones se generán luego en el orden que
se generaron los items factura. Por rendición se entiende la asginación de 1 o más item_factura a una factura determinada.

Cuando se dan de baja clientes y empresas se dan por finalizadas sus publicaciones.

Se finaliza una subasta ejecutando el método finalizar_subasta. Dentro de éste se determina la oferta ganadora como la oferta que tiene la fecha máxima, es decir la última oferta que se realizó sobre esa subasta.

En el listado estadístico se considera como calificación a la sumatoria de estrellas recibidas en el trimestre dado.

-- Stores Procedures

Las operaciones de login, alta, baja y modificación de usuarios cliente, usuarios empresa, visibilidades y publicaciónes, para facilitar la comunicación con la aplicación (y algo de fruta mas podemos tirar que ahora no se me ocurre :p) implementamos store procedures.
En cada store procedure se valida que la entrada sea la correcta dentro de los valores que maneja el modelo de datos, es decir por ejemplo, validación de uniques.

Al tener que guardar datos de la tarjeta, decidimos que al generar Factura se inserte la descripción de la forma de pago(sea efectivo o tarjeta) en la tabla Forma_Pago y en el caso de que sea tarjeta, se carguen los campos de tarjeta mediante otro procedimiento, separado de generar factura.

-- Funciones Historial

Para el historial decidimos utilizar consultas separadas, implementando funciones y aprovechando la normalización de los datos en las tablas de compras,ofertas y calificaciones. 
Cada función recibe un usuario y muestra las compras, ofertas o calificaciones(dependiendo de la función) en las cuales intervino este usuario sumado a datos de cada operación.
Para compra se muestra el comprador y el vendedor, la descripción de la publicación, el rubro de ésta, la cantidad y la fecha.
Para calificación, comprador, vendedor, cantidad de estrellas y descripción.
Por último para las ofertas se muesta el vendedor, copmrador, la fecha, el monto y si ganó o nó la subasta (de la forma 'Si','No').


Listado de Procedures y parámetros


-- Actualizar reputacion (se supone que cada vez que se califica a alguien se debe actualizar la reputacion de ese alguien)
SQL_O.actualizar_reputacion @tipo numeric(18,0), @bit bit -- el bit es para saber si es cliente o empresa

-- Ganador De Una Subasta.

SQL_O.setear_ganador 

--Login. 

SQL_O.proc_login @usuario varchar(30),@userpass nvarchar(255),@return numeric(1,0) out

-- Generar usuario. 
SQL_O.generar_usuario @nombreUsuario nvarchar(30) out, @pass nvarchar(255) out

-- Crear Publicación. 
SQL_O.alta_publicacion @descripcion nvarchar(255), @stock numeric(18,0),
										@precio numeric(18,2), @tipo nvarchar(255), 
										@estado varchar(255),@visibilidad nvarchar(255), @duenio varchar(30),
										@admite_preguntas bit, @fecha nvarchar(8), @return numeric(1,0) out
										
-- Editar Publicacion
SQL_O.editar_publicacion @nro_pub numeric(18,0),@estado nvarchar(255), @descripcion nvarchar(255),
										  @stock numeric(18,0), @precio numeric(18,2), @visibilidad nvarchar(255),
										  @duenio nvarchar(30), @permite_preg bit, @return numeric(1,0) out

-- Agregar Rubro a Publicacion

SQL_O.agregar_rubro @pub_cod numeric(18,0), @rubro nvarchar(255)

-- Alta Cliente. 
SQL_O.alta_cliente @nrodoc numeric(18,0),@tipodoc nvarchar(20),@apellido nvarchar(255),@nombre nvarchar(255),
							  @cuil nvarchar(50),@fecha_nac datetime,@mail nvarchar(50),@tel numeric(18,0),
							  @calle nvarchar(100),@nrocalle numeric(18,0), @piso numeric(18,0),
							  @depto nvarchar(50),@codpost nvarchar(50), @usuario nvarchar(30),
							  @return numeric(1,0)
							  

-- Alta Empresa. 
SQL_O.alta_empresa @razon_social nvarchar(255), @cuit nvarchar(50), @fecha_c datetime,
								    @contacto nvarchar(50),@mail nvarchar(50), @dom_calle nvarchar(100),
								    @nro_calle numeric(18,0), @piso numeric(18,0), @depto nvarchar(50),
								    @tel numeric(18,0), @cod_postal nvarchar(50),@usuario nvarchar(30),
								    @return numeric (1,0) out

-- Alta de visibilidad.

SQL_O.alta_visibilidad @descripcion nvarchar(255), @duracion numeric(18,0),
										 @precio numeric(18,2), @porcentaje numeric(18,2)

-- Alta de rol.

SQL_O.alta_rol @rol nvarchar(255)

-- Alta de funcionalidad por rol.

SQL_O.alta_funcionalidad_por_rol @funcionalidad nvarchar(255) , @rol nvarchar(255)

-- Calificar 

SQL_O.calificar @pub numeric(18,0), @usuario varchar(30), @cant_estrellas numeric(18,0),
								 @des nvarchar(255), @return numeric (1,0)

-- Generar Oferta
SQL_O.generar_oferta @pub numeric(18,0), @usuario varchar(30),@monto numeric(18,2), @fecha nvarchar(8)

--Finalizar subasta
SQL_O.finalizar_subasta @pub numeric(18,0) (faltan parametros)

-- Generar Compra

SQL_O.generar_compra @pub numeric(18,0), @usuario varchar(30) , @cant numeric(18,0), @fecha nvarchar(8)

-- Formular Pregunta.

SQL_O.crear_pregunta @publicacion numeric(18,0), @pregunta nvarchar(255), @autor nvarchar(255), @fecha nvarchar(8)


-- Responder Pregunta.

SQL_O.responder_pregunta @pregunta numeric(18,0), @respuesta nvarchar(255), @fecha nvarchar(8)

-- Modificacion de Cliente.

SQL_O.modificacion_cliente @nrodoc numeric(18,0),@tipodoc nvarchar(20),@apellido nvarchar(255),@nombre nvarchar(255),
											@cuil nvarchar(50),@fecha_nac datetime,@mail nvarchar(50),@tel numeric(18,0),
											@calle nvarchar(100),@nrocalle numeric(18,0), @piso numeric(18,0),
											@depto nvarchar(50),@codpost nvarchar(50), @usuario nvarchar(30),
											@return numeric(1,0) out

-- Modificacion de Empresa.

SQL_O.modificacion_empresa  @razon_social nvarchar(255), @cuit nvarchar(50), @fecha_creacion datetime, @contacto nvarchar(50), 
											 @mail nvarchar(50), @tel numeric(18,0), @calle nvarchar(100),@nrocalle numeric(18,0), @piso numeric(18,0),
											 @dpto nvarchar(50), @cod_post nvarchar(50), @usuario nvarchar(30), @return numeric(1,0) out					 

-- Modificacion de Rol

SQL_O.modificacion_rol @rol_cod numeric(18,0) ,@descripcion nvarchar(255), @return numeric(1,0) out

-- Quitar funcionalidad

SQL_O.quitar_funcionalidad @funcionalidad nvarchar(255), @rol nvarchar(255)

-- Modificacion de Visibilidad//Si los chicos nos mandan el codigo de la visibilidad podríamos cambiar también la descripción//

SQL_O.modificacion_visibilidad @vis_cod numeric(18,0) ,@descripcion nvarchar(255), @duracion numeric(18,0), 
												@precio numeric(18,2),@porcentaje numeric(18,2), 
												@return numeric(1,0) out

-- Baja de visibilidad. 

SQL_O.baja_visibilidad @visibilidad nvarchar(255)

-- Baja de Cliente.
SQL_O.baja_cliente @nombre nvarchar(255) , @apellido nvarchar(255) ,
                                    @tipo_doc nvarchar(20) ,@nro_doc numeric(18,0) , @mail nvarchar(50)

-- Baja de Empresa.

SQL_O.baja_empresa  @razon_social nvarchar(255) , @cuit nvarchar(50) , @mail nvarchar(50) 

-- Baja de Rol. 

SQL_O.baja_rol @rol nvarchar(255)

-- Rehabilitar Rol. 

SQL_O.rehabilitacion_rol @rol nvarchar(255)

-- Generar Factura
SQL_O.generar_factura @user nvarchar(30), @forma_pago nvarchar(255), @fecha nvarchar(8), @nro_fact numeric(18,0) out

-- Crear Item Factura

SQL_O.crear_item @pub_cod numeric(18,0), @cantidad numeric(18,0), @tipo nvarchar(255)

-- Agregar Items a la factura

SQL_O.agregar_item  @factura numeric(18,0), @item_factura numeric(18,0)

-- Inhabilitar Usuario 

SQL_O.inhabilitar_usuario @user varchar(30)

-- Rehabilitar Usuario 

SQL_O.rehabilitar_usuario @user varchar(30)

--Finalizar subasta
SQL_O.finalizar_subasta @pub_cod numeric(18,0)


-- Cargar Datos Tarjeta
SQL_O.cargar_datos_tarjeta @nro_fact numeric(18,0), @nro_tarj numeric(16,0), @duenio nvarchar(80),@fecha_venc nvarchar(8),@tipo_tarjeta nvarchar(30)



